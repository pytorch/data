# Copyright (c) Facebook, Inc. and its affiliates.
from typing import Any, Callable, Iterator, Tuple, Union

from torchdata.datapipes import functional_datapipe
from torchdata.datapipes.iter import IterDataPipe

from torchdata.datapipes.utils.common import _default_filepath_fn

U = Union[bytes, bytearray, str]


@functional_datapipe("save_to_disk")
class SaverIterDataPipe(IterDataPipe[str]):
    r"""
    Iterable DataPipe that takes in a DataPipe of tuples of metadata and data, saves the data
    to the target path (generated by the filepath_fn and metadata), and yields the resulting path

    Args:
        source_datapipe: Iterable DataPipe with tuples of metadata and data
        mode: Mode in which the file will be opened for write the data ("w" by default)
        filepath_fn: Function that takes in metadata nad returns the target path of the new file
    """

    def __init__(
        self,
        source_datapipe: IterDataPipe[Tuple[Any, U]],
        mode: str = "w",
        filepath_fn: Callable[[Any], str] = _default_filepath_fn,
    ):
        self.source_datapipe: IterDataPipe[Tuple[Any, U]] = source_datapipe
        self.mode: str = mode
        self.fn: Callable[[Any], str] = filepath_fn

    def __iter__(self) -> Iterator[str]:
        for meta, data in self.source_datapipe:
            filepath = self.fn(meta)
            with open(filepath, self.mode) as f:
                f.write(data)
            yield filepath

    def __len__(self) -> int:
        return len(self.source_datapipe)
