name: Push Binary Release

on:
  # Manually trigger for testing
  workflow_dispatch:
  # TODO: Automatically trigger test and nightly
  # push
  #   branches:
  #     - release/*
  # schedule
  #   - cron: 30 23 * * *
  pull_request:
    branches:
      - main

jobs:
  # Build, Test and Upload
  build_test_upload:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # For the sake of future release with cpp code
      matrix:
        os:
          # - macos-latest
          - ubuntu-latest
          # - windows-latest
        python-version:
          # - 3.7
          # - 3.8
          - 3.9
    steps:
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Install dependencies
        run: |
          pip3 install -r requirements.txt
          # TODO: Detect nightly or test or official release
          pip3 install --pre torch -f https://download.pytorch.org/whl/test/cpu/torch_test.html
      - name:
          Build TorchData Wheel
          # TODO: Detect nightly or release
        run: |
          pip3 install wheel
          python setup.py bdist_wheel --release
      - name: Install TorchData
        run: pip3 install dist/torchdata*.whl
      - name: Install test requirements
        run: pip3 install expecttest fsspec iopath==0.1.9 numpy pytest rarfile
      - name: Run DataPipes tests with pytest
        run:
          pytest --no-header -v test --ignore=test/test_period.py --ignore=test/test_text_examples.py
          --ignore=test/test_audio_examples.py
      - name: Push TorchData Binary to PyTorch Storage
        # TODO: Ask devinfra to add these keys
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PYTORCH_BINARY_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PYTORCH_BINARY_AWS_SECRET_ACCESS_KEY }}
        run: |
          pip3 install --user awscli
          set -x
          echo $AWS_ACCESS_KEY_ID
          echo $AWS_SECRET_ACCESS_KEY
          # for pkg in ~/workspace/*.whl; do
          #     aws s3 cp "$pkg" "s3://pytorch/whl/test/cpu" --acl public-read
          # done
      - name: Push TorchData Binary to PYPI
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          echo $PYPI_TOKEN
      #   run: |
      #     pip3 install twine
      #     python -m twine upload
      #       --username __token__ \
      #       --password "$PYPI_TOKEN" \
      #       dist/torchdata*.whl
      # TODO: Add upload to conda
