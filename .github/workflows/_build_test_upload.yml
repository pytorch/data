name: Build, Test and Upload Wheel

on:
  pull_request:

jobs:
  get_release_type:
    runs-on: ubuntu-latest
    outputs:
      type: ${{ steps.get_release_type.outputs.type }}
    steps:
      - name: Get Release Type
        run: |
          RELEASE_TYPE=test
          echo "Release Type: $RELEASE_TYPE"
          echo "type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
        id: get_release_type

  conda_build_test:
    needs: get_release_type
    runs-on: ${{ matrix.os }}
    container: ${{ startsWith( matrix.os, 'ubuntu' ) && 'pytorch/manylinux-cpu' || null }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - macos-m1-12
        python-version:
          - 3.8
          - "3.10"
    steps:
      - name: Checkout Source Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Determine if build AWSSDK
        shell: bash -l {0}
        run: |
          if ${{ startsWith( matrix.os, 'windows' ) }}; then
            BUILD_S3=0
          else
            BUILD_S3=1
          fi
          echo "value=$BUILD_S3" >> $GITHUB_OUTPUT
        id: build_s3
      - name: Add temp runner environment variables
        shell: bash -l {0}
        run: |
          echo "MINICONDA_INSTALL_PATH=${RUNNER_TEMP}/miniconda" >> "${GITHUB_ENV}"
          echo "CONDA_ENV_PATH=${RUNNER_TEMP}/conda_build_env" >> "${GITHUB_ENV}"
      - name: Create Conda Env on Windows
        if: ${{ startsWith( matrix.os, 'windows' ) }}
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: ${{ matrix.python-version }}
          activate-environment: ${{ env.CONDA_ENV_PATH }}
      - name: Install Conda on MacOS and Linux
        if: ${{ ! startsWith( matrix.os, 'windows' ) }}
        shell: bash -l {0}
        run: |
          mkdir -p "${MINICONDA_INSTALL_PATH}"
          if ${{ startsWith( matrix.os, 'ubuntu' ) }}; then
            curl https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -o "${MINICONDA_INSTALL_PATH}/miniconda.sh"
          elif ${{ startsWith( matrix.os, 'macos-m1' ) }}; then
            curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.sh -o "${MINICONDA_INSTALL_PATH}/miniconda.sh"
          else
            curl https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -o "${MINICONDA_INSTALL_PATH}/miniconda.sh"
          fi
          bash "${MINICONDA_INSTALL_PATH}/miniconda.sh" -b -u -p "${MINICONDA_INSTALL_PATH}"
          rm -rf "${MINICONDA_INSTALL_PATH}/miniconda.sh"
          echo "${MINICONDA_INSTALL_PATH}/bin" >> "$GITHUB_PATH"
          ${MINICONDA_INSTALL_PATH}/bin/conda init bash
      - name: Create Conda Env on MacOS and Linux
        if: ${{ ! startsWith( matrix.os, 'windows' ) }}
        shell: bash -l {0}
        run: |
          source "${MINICONDA_INSTALL_PATH}/etc/profile.d/conda.sh"

          if [[ ${{ matrix.python-version }} = "3.11" ]]; then
            conda create -y -p "${CONDA_ENV_PATH}" python=3.8
          else
            conda create -y -p "${CONDA_ENV_PATH}" python=${{ matrix.python-version }}
          fi
      - name: Build TorchData for Conda
        shell: bash -l {0}
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
          PYTORCH_VERSION: "2.0.0"
          BUILD_S3: ${{ steps.build_s3.outputs.value }}
        run: |
          set -ex
          if ${{ ! startsWith( matrix.os, 'windows' ) }}; then
            source "${MINICONDA_INSTALL_PATH}/etc/profile.d/conda.sh"
          fi
          conda activate "${CONDA_ENV_PATH}"
          if [[ "${PYTHON_VERSION}" = "3.11" ]]; then
            conda install -yq conda-build -c malfet -c conda-forge
            export CONDA_CHANNEL_FLAGS="${CONDA_CHANNEL_FLAGS} -c malfet"
          else
            conda install -yq conda-build
          fi
          packaging/build_conda.sh
          conda index ./conda-bld
      - name: Upload Conda Package to Github
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: torchdata-artifact
          path: conda-bld/*/torchdata-*.tar.bz2
