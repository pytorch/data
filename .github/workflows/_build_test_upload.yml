name: Build, Test and Upload Wheel

on:
  workflow_call:
    inputs:
      branch:
        required: true
        type: string
      pip_path:
        required: true
        type: string
      pre_dev_release:
        required: true
        type: boolean
    secrets:
      PYTORCH_BINARY_AWS_ACCESS_KEY_ID:
        required: false
      PYTORCH_BINARY_AWS_SECRET_ACCESS_KEY:
        required: false
      PYPI_TOKEN:
        required: false
      CONDA_PYTORCHBOT_TOKEN:
        required: false

jobs:
  build_test_upload:
    if: github.repository == 'pytorch/data' && inputs.branch != ''
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      # TODO: Turn the matrix on after cpp landed
      matrix:
        os:
          # - macos-latest
          - ubuntu-latest
          # - windows-latest
        python-version:
          # - 3.7
          # - 3.8
          - 3.9
    steps:
      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Pre-release/Development-release PyTorch
        if: inputs.pre_dev_release
        run: |
          pip3 install numpy
          pip3 install --pre torch -f ${{ inputs.pip_path }}
      - name: Install Official PyTorch
        if: ${{ ! inputs.pre_dev_release }}
        run: |
          pip3 install numpy
          pip3 install torch torchdata -f ${{ inputs.pip_path }}
      - name: Check out source repository
        uses: actions/checkout@v2
        with:
          ref: ${{ inputs.branch }}
      - name: Get Hash of the Last Commit from Release
        if: inputs.pre_dev_release
        run: |
          pip3 install -r requirements.txt
          # Using --no-deps here to make sure correct version of PyTorch Core
          pip3 install --pre torchdata -f ${{ inputs.pip_path }} --no-deps
          pushd ~
          RELEASE_COMMIT=$(python -c 'import torchdata; print(torchdata.version.git_version)')
          echo "::set-output name=hash::$RELEASE_COMMIT"
          popd
          pip3 uninstall -y torchdata
        id: release_commit
      - name: Get Hash of the Last Commit from Source
        if: ${{ inputs.pre_dev_release }}
        run: |
          SOURCE_COMMIT=$(git rev-parse HEAD)
          echo "::set-output name=hash::$SOURCE_COMMIT"
        id: source_commit
      # The following steps for pre-release will be skipped if the last commit
      # from branch is the same as the last commit in release wheel
      - name: Build and Install TorchData Wheel
        if: |
          ! inputs.pre_dev_release ||
            steps.release_commit.outputs.hash != steps.source_commit.outputs.hash
        run: |
          pip3 install wheel
          python setup.py bdist_wheel --release
          pip3 install dist/torchdata*.whl
      - name: Install test requirements
        if: |
          ! inputs.pre_dev_release ||
            steps.release_commit.outputs.hash != steps.source_commit.outputs.hash
        run: pip3 install expecttest fsspec iopath==0.1.9 numpy pytest rarfile
      - name: Run DataPipes tests with pytest
        if: |
          ! inputs.pre_dev_release ||
            steps.release_commit.outputs.hash != steps.source_commit.outputs.hash
        run:
          pytest --no-header -v test --ignore=test/test_period.py --ignore=test/test_text_examples.py
          --ignore=test/test_audio_examples.py
      - name: Upload Wheel to S3 Storage
        if: |
          inputs.pre_dev_release &&
            (steps.release_commit.outputs.hash != steps.source_commit.outputs.hash)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PYTORCH_BINARY_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PYTORCH_BINARY_AWS_SECRET_ACCESS_KEY }}
        run: |
          [[ ${{ inputs.branch }} == 'main' ]] && S3_PATH=s3://pytorch/whl/nightly/ || S3_PATH=s3://pytorch/whl/test/
          pip3 install --user awscli
          set -x
          for pkg in dist/torchdata*.whl; do
              aws s3 cp "$pkg" "$S3_PATH" --acl public-read
          done
      - name: Push Official Wheel to PYPI
        if: ${{ ! inputs.pre_dev_release }}
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
        run: |
          pip3 install twine
          python -m twine upload
            --username __token__ \
            --password "$PYPI_TOKEN" \
            dist/torchdata*.whl
      # TODO: Upload Nightly/Official Wheel to Conda
